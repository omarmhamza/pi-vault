from datetime import datetime
from flask import render_template, session, redirect, url_for, request, flash, abort, current_app
from is_safe_url import is_safe_url

from forms import AddPasswordField, Login
from Password import Password, Encryption
from collections import deque
from . import main
from methods import *
from flask_login import login_user, login_required, logout_user, fresh_login_required, current_user
from Account import Account


# session["name"] = "OMAR"  # test field


@main.route("/", methods=["GET"])
@login_required
def index():
    if not current_user.is_authenticated:
        return current_app.login_manager.unauthorized()
    else:
        user = current_user
        web_accounts = getPasswords(user.id)
        passwords_list = deque()
        for passwords in web_accounts:
            for id, details in passwords.items():
                # try:
                password = {"raw": Encryption.decrypt(details["encrypted"]),
                            "website": Encryption.decrypt(details["website"]),
                            "username": Encryption.decrypt(details["username"]), "icon": details["icon"], "id": id,
                            "validURL": details["validURL"], "created": details["created"]
                            }
                passwords_list.append(password)
                # except:
                #     continue
        sorted_pass = sorted(passwords_list, key=lambda i: i['created'], reverse=True)
        return render_template("passwords.html", passwords=sorted_pass,user=user)


@main.route("/passwords/add", methods=["GET", "POST"])
@login_required
def addPassword():
    if not current_user.is_authenticated:
        return current_app.login_manager.unauthorized()
    else:
        user = current_user
        form = AddPasswordField()
        if form.is_submitted():
            if form.validate_on_submit():
                icon = getIconFromList(request.form.getlist('cat'))
                password = Password(
                    website=form.website.data,
                    icon=icon,
                    username=form.email.data,
                    raw=form.password.data,
                    _id=12312321
                    # _id=getPasswordCount(session["name"]) + 1
                )
                pushPassword(session['id'], password.jsonifyResponse())
                flash("You successfully added a password to the list", "success")
                return redirect("/")
            else:
                for field, error in form.errors.items():
                    for e in error:
                        flash(e, "error")
        return render_template("add.html", icons=getIcons(), form=form,user=user)


@main.route("/passwords/edit/<id>", methods=["GET", "POST"])
@login_required
def edit(id):
    if not current_user.is_authenticated:
        return current_app.login_manager.unauthorized()
    else:
        user = current_user
        form = AddPasswordField()
        if form.is_submitted() and form.validate_on_submit():
            now = datetime.now()
            date = now.strftime("%d/%m/%Y, %H:%M:%S")
            icon = getIconFromList(request.form.getlist('cat'))
            password = {
                "icon": icon,
                "website": Encryption.encrypt(form.website.data),
                "validURL": Password.validateURL(form.website.data),
                "username": Encryption.encrypt(form.email.data),
                "encrypted": Encryption.encrypt(form.password.data),
                "modified": str(date),
            }
            updatePassword(session['id'], id, password)
            flash("Successfully edited password", "info")
            return redirect("/")
        return render_template("edit.html", icons=getIcons(), form=form, password=getPassword(session['id'], str(id)),
                               id=id,user=user)


@main.route("/passwords/delete/<id>", methods=["GET"])
@login_required
def delete(id):
    deletePassword(session['id'], id)
    flash("Deleted password", "success")
    return redirect("/")


@main.route("/profile", methods=["GET"])
@fresh_login_required
def profile():
    user = current_user
    return render_template("user.html",user=current_user)


@main.route("/login", methods=["GET", "POST"])
def login():
    if current_user.is_authenticated:
        return redirect("/")
    form = Login()
    if form.is_submitted() and form.validate_on_submit():
        username = form.username.data.lower()
        raw_pass = form.password.data
        account = validateAccount(username)
        if account:
            if Account.check_password(account["authentication"]["hashed"], raw_pass):
                flash("You are signed in", "success")
                rememberMe = form.rememberMe.data
                user = Account(username, raw_pass)
                user.authenticate()
                user.authentication = user.active = True
                user._id = account["_id"]
                session['id'] = account["_id"]
                session["username"] = username
                is_logged = login_user(user, rememberMe)
                if is_logged:
                    if rememberMe:
                        session.permanent = True
                    next_page = request.args.get('next')
                    if next_page is None or not next_page.startswith('/'):
                        next_page = url_for('main.index')
                    elif not is_safe_url(next_page, allowed_hosts={"0.0.0.0"}):
                        return "NOT SAFE"
                    return redirect(next_page)
                else:
                    flash("An error has occurred, please try again later.","error")
            else:
                flash("Your username/password is wrong", "error")
        else:
            flash("There is no account with this username", "error")
        # return redirect("/login")

    return render_template("login.html", form=form)


@main.route("/signup", methods=["GET", "POST"])
def signup():
    account = Account("face2", "test","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AAAADgAAAAAAAAAAAAA/gAAAOEJJTQQNAAAAAAAEAAAAHjhCSU0EGQAAAAAABAAAAB44QklNA/MAAAAAAAkAAAAAAAAAAAEAOEJJTScQAAAAAAAKAAEAAAAAAAAAAjhCSU0D9QAAAAAASAAvZmYAAQBsZmYABgAAAAAAAQAvZmYAAQChmZoABgAAAAAAAQAyAAAAAQBaAAAABgAAAAAAAQA1AAAAAQAtAAAABgAAAAAAAThCSU0D+AAAAAAAcAAA/////////////////////////////wPoAAAAAP////////////////////////////8D6AAAAAD/////////////////////////////A+gAAAAA/////////////////////////////wPoAAA4QklNBAgAAAAAABAAAAABAAACQAAAAkAAAAAAOEJJTQQeAAAAAAAEAAAAADhCSU0EGgAAAAADPwAAAAYAAAAAAAAAAAAAAIAAAACAAAAABQB2AGEAcgB1AG4AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAIAAAACAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAEAAAAAAABudWxsAAAAAgAAAAZib3VuZHNPYmpjAAAAAQAAAAAAAFJjdDEAAAAEAAAAAFRvcCBsb25nAAAAAAAAAABMZWZ0bG9uZwAAAAAAAAAAQnRvbWxvbmcAAACAAAAAAFJnaHRsb25nAAAAgAAAAAZzbGljZXNWbExzAAAAAU9iamMAAAABAAAAAAAFc2xpY2UAAAASAAAAB3NsaWNlSURsb25nAAAAAAAAAAdncm91cElEbG9uZwAAAAAAAAAGb3JpZ2luZW51bQAAAAxFU2xpY2VPcmlnaW4AAAANYXV0b0dlbmVyYXRlZAAAAABUeXBlZW51bQAAAApFU2xpY2VUeXBlAAAAAEltZyAAAAAGYm91bmRzT2JqYwAAAAEAAAAAAABSY3QxAAAABAAAAABUb3AgbG9uZwAAAAAAAAAATGVmdGxvbmcAAAAAAAAAAEJ0b21sb25nAAAAgAAAAABSZ2h0bG9uZwAAAIAAAAADdXJsVEVYVAAAAAEAAAAAAABudWxsVEVYVAAAAAEAAAAAAABNc2dlVEVYVAAAAAEAAAAAAAZhbHRU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aABvAHAAIABDAEMAIAAyADAAMQA3AAAAAQA4QklNBAYAAAAAAAcABgEBAAEBAP/hDq1odHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTM4IDc5LjE1OTgyNCwgMjAxNi8wOS8xNC0wMTowOTowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHBob3Rvc2hvcDpMZWdhY3lJUFRDRGlnZXN0PSIyNjUwOTM4RUFBNDEwRkIzODJDNEExM0Y0NEYwRUM2QiIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgcGhvdG9zaG9wOklDQ1Byb2ZpbGU9IiIgeG1wOkNyZWF0ZURhdGU9IjIwMTUtMTAtMTBUMTU6MzE6MTcrMDU6MzAiIHhtcDpNb2RpZnlEYXRlPSIyMDE3LTAyLTEwVDE3OjAwOjQ1KzA1OjMwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDE3LTAyLTEwVDE3OjAwOjQ1KzA1OjMwIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE1IChXaW5kb3dzKSIgZGM6Zm9ybWF0PSJpbWFnZS9qcGVnIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOmExMTI5NWExLWE2Y2UtMTk0My05ZWY1LWI4ZTRkYTMwOTUwYiIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMjM5QjgyMUU4NzBFNTExOTgxRDgzOUUyMjI3NDQ0MiIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOkUyMzlCODIxRTg3MEU1MTE5ODFEODM5RTIyMjc0NDQyIj4gPHBob3Rvc2hvcDpEb2N1bWVudEFuY2VzdG9ycz4gPHJkZjpCYWc+IDxyZGY6bGk+eG1wLmRpZDo1RDkxRDkzMTY5MjkxMUU2QTQxQkRGOTIzRTZFMkUzRDwvcmRmOmxpPiA8L3JkZjpCYWc+IDwvcGhvdG9zaG9wOkRvY3VtZW50QW5jZXN0b3JzPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpFMjM5QjgyMUU4NzBFNTExOTgxRDgzOUUyMjI3NDQ0MiIgc3RFdnQ6d2hlbj0iMjAxNS0xMC0xMlQxOToyMDoxNCswNTozMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDphMTEyOTVhMS1hNmNlLTE5NDMtOWVmNS1iOGU0ZGEzMDk1MGIiIHN0RXZ0OndoZW49IjIwMTctMDItMTBUMTc6MDA6NDUrMDU6MzAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE3IChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg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")
    addAccount(account)
    return "added"


@main.route("/logout")
def logout():
    logout_user()
    flash("You have been logged out", "info")
    return redirect("/login")


@main.route("/test")
def test():
    return str(validateAccount("omar"))
